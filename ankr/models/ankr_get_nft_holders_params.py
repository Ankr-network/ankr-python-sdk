# coding: utf-8

"""
    Ankr Advanced API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnkrGetNFTHoldersParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blockchain': 'str',
        'contract_address': 'str',
        'page_size': 'int',
        'page_token': 'str',
        'sync_check': 'bool'
    }

    attribute_map = {
        'blockchain': 'blockchain',
        'contract_address': 'contractAddress',
        'page_size': 'pageSize',
        'page_token': 'pageToken',
        'sync_check': 'syncCheck'
    }

    def __init__(self, blockchain=None, contract_address=None, page_size=None, page_token=None, sync_check=None):  # noqa: E501
        """AnkrGetNFTHoldersParams - a model defined in Swagger"""  # noqa: E501
        self._blockchain = None
        self._contract_address = None
        self._page_size = None
        self._page_token = None
        self._sync_check = None
        self.discriminator = None
        self.blockchain = blockchain
        self.contract_address = contract_address
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
        if sync_check is not None:
            self.sync_check = sync_check

    @property
    def blockchain(self):
        """Gets the blockchain of this AnkrGetNFTHoldersParams.  # noqa: E501

        Name of the blockchain. Acceptable values: arbitrum, avalanche, base, bsc, eth, fantom, flare, gnosis, optimism, polygon, polygon_zkevm, rollux, syscoin, zksync_era, avalanche_fuji, eth_goerli, optimism_testnet, polygon_mumbai.  # noqa: E501

        :return: The blockchain of this AnkrGetNFTHoldersParams.  # noqa: E501
        :rtype: str
        """
        return self._blockchain

    @blockchain.setter
    def blockchain(self, blockchain):
        """Sets the blockchain of this AnkrGetNFTHoldersParams.

        Name of the blockchain. Acceptable values: arbitrum, avalanche, base, bsc, eth, fantom, flare, gnosis, optimism, polygon, polygon_zkevm, rollux, syscoin, zksync_era, avalanche_fuji, eth_goerli, optimism_testnet, polygon_mumbai.  # noqa: E501

        :param blockchain: The blockchain of this AnkrGetNFTHoldersParams.  # noqa: E501
        :type: str
        """
        if blockchain is None:
            raise ValueError("Invalid value for `blockchain`, must not be `None`")  # noqa: E501
        allowed_values = ["arbitrum", "avalanche", "avalanche_fuji", "base", "bsc", "eth", "eth_goerli", "fantom", "flare", "gnosis", "linea", "optimism", "optimism_testnet", "polygon", "polygon_mumbai", "polygon_zkevm", "rollux", "scroll", "syscoin"]  # noqa: E501
        if blockchain not in allowed_values:
            raise ValueError(
                "Invalid value for `blockchain` ({0}), must be one of {1}"  # noqa: E501
                .format(blockchain, allowed_values)
            )

        self._blockchain = blockchain

    @property
    def contract_address(self):
        """Gets the contract_address of this AnkrGetNFTHoldersParams.  # noqa: E501

        Contract address of the NFT collection. Supports ENS.  # noqa: E501

        :return: The contract_address of this AnkrGetNFTHoldersParams.  # noqa: E501
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this AnkrGetNFTHoldersParams.

        Contract address of the NFT collection. Supports ENS.  # noqa: E501

        :param contract_address: The contract_address of this AnkrGetNFTHoldersParams.  # noqa: E501
        :type: str
        """
        if contract_address is None:
            raise ValueError("Invalid value for `contract_address`, must not be `None`")  # noqa: E501

        self._contract_address = contract_address

    @property
    def page_size(self):
        """Gets the page_size of this AnkrGetNFTHoldersParams.  # noqa: E501

        Number of entries per page. int32. Max value — 10000, default value — 1000.  # noqa: E501

        :return: The page_size of this AnkrGetNFTHoldersParams.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this AnkrGetNFTHoldersParams.

        Number of entries per page. int32. Max value — 10000, default value — 1000.  # noqa: E501

        :param page_size: The page_size of this AnkrGetNFTHoldersParams.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this AnkrGetNFTHoldersParams.  # noqa: E501

        Current page token for pagination.  # noqa: E501

        :return: The page_token of this AnkrGetNFTHoldersParams.  # noqa: E501
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this AnkrGetNFTHoldersParams.

        Current page token for pagination.  # noqa: E501

        :param page_token: The page_token of this AnkrGetNFTHoldersParams.  # noqa: E501
        :type: str
        """

        self._page_token = page_token

    @property
    def sync_check(self):
        """Gets the sync_check of this AnkrGetNFTHoldersParams.  # noqa: E501

        If false, the data is returned regardless of indexer health, if true, the data is returned only when the indexer health check is positive.  # noqa: E501

        :return: The sync_check of this AnkrGetNFTHoldersParams.  # noqa: E501
        :rtype: bool
        """
        return self._sync_check

    @sync_check.setter
    def sync_check(self, sync_check):
        """Sets the sync_check of this AnkrGetNFTHoldersParams.

        If false, the data is returned regardless of indexer health, if true, the data is returned only when the indexer health check is positive.  # noqa: E501

        :param sync_check: The sync_check of this AnkrGetNFTHoldersParams.  # noqa: E501
        :type: bool
        """

        self._sync_check = sync_check

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnkrGetNFTHoldersParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnkrGetNFTHoldersParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
