# coding: utf-8

"""
    Ankr Advanced API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnkrGetNFTMetadataParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blockchain': 'str',
        'contract_address': 'str',
        'force_fetch': 'bool',
        'sync_check': 'bool',
        'token_id': 'str'
    }

    attribute_map = {
        'blockchain': 'blockchain',
        'contract_address': 'contractAddress',
        'force_fetch': 'forceFetch',
        'sync_check': 'syncCheck',
        'token_id': 'tokenId'
    }

    def __init__(self, blockchain=None, contract_address=None, force_fetch=None, sync_check=None, token_id=None):  # noqa: E501
        """AnkrGetNFTMetadataParams - a model defined in Swagger"""  # noqa: E501
        self._blockchain = None
        self._contract_address = None
        self._force_fetch = None
        self._sync_check = None
        self._token_id = None
        self.discriminator = None
        if blockchain is not None:
            self.blockchain = blockchain
        self.contract_address = contract_address
        if force_fetch is not None:
            self.force_fetch = force_fetch
        if sync_check is not None:
            self.sync_check = sync_check
        if token_id is not None:
            self.token_id = token_id

    @property
    def blockchain(self):
        """Gets the blockchain of this AnkrGetNFTMetadataParams.  # noqa: E501

        Name of the blockchain. Acceptable values: arbitrum, avalanche, base, bsc, eth, fantom, flare, gnosis, optimism, polygon, polygon_zkevm, rollux, syscoin, zksync_era, avalanche_fuji, eth_goerli, optimism_testnet, polygon_mumbai.  # noqa: E501

        :return: The blockchain of this AnkrGetNFTMetadataParams.  # noqa: E501
        :rtype: str
        """
        return self._blockchain

    @blockchain.setter
    def blockchain(self, blockchain):
        """Sets the blockchain of this AnkrGetNFTMetadataParams.

        Name of the blockchain. Acceptable values: arbitrum, avalanche, base, bsc, eth, fantom, flare, gnosis, optimism, polygon, polygon_zkevm, rollux, syscoin, zksync_era, avalanche_fuji, eth_goerli, optimism_testnet, polygon_mumbai.  # noqa: E501

        :param blockchain: The blockchain of this AnkrGetNFTMetadataParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["arbitrum", "avalanche", "avalanche_fuji", "base", "bsc", "eth", "eth_goerli", "fantom", "flare", "gnosis", "linea", "optimism", "optimism_testnet", "polygon", "polygon_mumbai", "polygon_zkevm", "rollux", "scroll", "syscoin"]  # noqa: E501
        if blockchain not in allowed_values:
            raise ValueError(
                "Invalid value for `blockchain` ({0}), must be one of {1}"  # noqa: E501
                .format(blockchain, allowed_values)
            )

        self._blockchain = blockchain

    @property
    def contract_address(self):
        """Gets the contract_address of this AnkrGetNFTMetadataParams.  # noqa: E501

        Address of the NFT contract the metadata belongs to. Supports ENS.  # noqa: E501

        :return: The contract_address of this AnkrGetNFTMetadataParams.  # noqa: E501
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this AnkrGetNFTMetadataParams.

        Address of the NFT contract the metadata belongs to. Supports ENS.  # noqa: E501

        :param contract_address: The contract_address of this AnkrGetNFTMetadataParams.  # noqa: E501
        :type: str
        """
        if contract_address is None:
            raise ValueError("Invalid value for `contract_address`, must not be `None`")  # noqa: E501

        self._contract_address = contract_address

    @property
    def force_fetch(self):
        """Gets the force_fetch of this AnkrGetNFTMetadataParams.  # noqa: E501

        Get NFT metadata from the contract (true) or database (false).  # noqa: E501

        :return: The force_fetch of this AnkrGetNFTMetadataParams.  # noqa: E501
        :rtype: bool
        """
        return self._force_fetch

    @force_fetch.setter
    def force_fetch(self, force_fetch):
        """Sets the force_fetch of this AnkrGetNFTMetadataParams.

        Get NFT metadata from the contract (true) or database (false).  # noqa: E501

        :param force_fetch: The force_fetch of this AnkrGetNFTMetadataParams.  # noqa: E501
        :type: bool
        """

        self._force_fetch = force_fetch

    @property
    def sync_check(self):
        """Gets the sync_check of this AnkrGetNFTMetadataParams.  # noqa: E501

        If false, the data is returned regardless of indexer health, if true, the data is returned only when the indexer health check is positive.  # noqa: E501

        :return: The sync_check of this AnkrGetNFTMetadataParams.  # noqa: E501
        :rtype: bool
        """
        return self._sync_check

    @sync_check.setter
    def sync_check(self, sync_check):
        """Sets the sync_check of this AnkrGetNFTMetadataParams.

        If false, the data is returned regardless of indexer health, if true, the data is returned only when the indexer health check is positive.  # noqa: E501

        :param sync_check: The sync_check of this AnkrGetNFTMetadataParams.  # noqa: E501
        :type: bool
        """

        self._sync_check = sync_check

    @property
    def token_id(self):
        """Gets the token_id of this AnkrGetNFTMetadataParams.  # noqa: E501

        Token ID of the NFT the metadata belongs to. Created by the contract when minting the NFT.  # noqa: E501

        :return: The token_id of this AnkrGetNFTMetadataParams.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this AnkrGetNFTMetadataParams.

        Token ID of the NFT the metadata belongs to. Created by the contract when minting the NFT.  # noqa: E501

        :param token_id: The token_id of this AnkrGetNFTMetadataParams.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnkrGetNFTMetadataParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnkrGetNFTMetadataParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
