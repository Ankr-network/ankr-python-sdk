# coding: utf-8

"""
    Ankr Advanced API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnkrGetNFTsByOwnerParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blockchain': 'list[str]',
        'filter': 'list[dict(str, list[str])]',
        'page_size': 'int',
        'page_token': 'str',
        'sync_check': 'bool',
        'wallet_address': 'str'
    }

    attribute_map = {
        'blockchain': 'blockchain',
        'filter': 'filter',
        'page_size': 'pageSize',
        'page_token': 'pageToken',
        'sync_check': 'syncCheck',
        'wallet_address': 'walletAddress'
    }

    def __init__(self, blockchain=None, filter=None, page_size=None, page_token=None, sync_check=None, wallet_address=None):  # noqa: E501
        """AnkrGetNFTsByOwnerParams - a model defined in Swagger"""  # noqa: E501
        self._blockchain = None
        self._filter = None
        self._page_size = None
        self._page_token = None
        self._sync_check = None
        self._wallet_address = None
        self.discriminator = None
        if blockchain is not None:
            self.blockchain = blockchain
        if filter is not None:
            self.filter = filter
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
        if sync_check is not None:
            self.sync_check = sync_check
        self.wallet_address = wallet_address

    @property
    def blockchain(self):
        """Gets the blockchain of this AnkrGetNFTsByOwnerParams.  # noqa: E501

        Name of the blockchain or list of blockchain names. Single: eth. [arbitrum, avalanche, base, bsc, eth, fantom, flare, gnosis, optimism, polygon, polygon_zkevm, rollux, syscoin, zksync_era, avalanche_fuji, eth_goerli, optimism_testnet, polygon_mumbai.]. All chains: empty value.  # noqa: E501

        :return: The blockchain of this AnkrGetNFTsByOwnerParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._blockchain

    @blockchain.setter
    def blockchain(self, blockchain):
        """Sets the blockchain of this AnkrGetNFTsByOwnerParams.

        Name of the blockchain or list of blockchain names. Single: eth. [arbitrum, avalanche, base, bsc, eth, fantom, flare, gnosis, optimism, polygon, polygon_zkevm, rollux, syscoin, zksync_era, avalanche_fuji, eth_goerli, optimism_testnet, polygon_mumbai.]. All chains: empty value.  # noqa: E501

        :param blockchain: The blockchain of this AnkrGetNFTsByOwnerParams.  # noqa: E501
        :type: list[str]
        """

        self._blockchain = blockchain

    @property
    def filter(self):
        """Gets the filter of this AnkrGetNFTsByOwnerParams.  # noqa: E501

        Filtering. Contract address (retrieves all NFTS by the address) or contract address plus NFT ID (retrieves only that NFT). key-value.  # noqa: E501

        :return: The filter of this AnkrGetNFTsByOwnerParams.  # noqa: E501
        :rtype: list[dict(str, list[str])]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this AnkrGetNFTsByOwnerParams.

        Filtering. Contract address (retrieves all NFTS by the address) or contract address plus NFT ID (retrieves only that NFT). key-value.  # noqa: E501

        :param filter: The filter of this AnkrGetNFTsByOwnerParams.  # noqa: E501
        :type: list[dict(str, list[str])]
        """

        self._filter = filter

    @property
    def page_size(self):
        """Gets the page_size of this AnkrGetNFTsByOwnerParams.  # noqa: E501

        Number of entries per page. int32. Max value — 50, default value — 10.  # noqa: E501

        :return: The page_size of this AnkrGetNFTsByOwnerParams.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this AnkrGetNFTsByOwnerParams.

        Number of entries per page. int32. Max value — 50, default value — 10.  # noqa: E501

        :param page_size: The page_size of this AnkrGetNFTsByOwnerParams.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this AnkrGetNFTsByOwnerParams.  # noqa: E501

        Current page token for pagination.  # noqa: E501

        :return: The page_token of this AnkrGetNFTsByOwnerParams.  # noqa: E501
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this AnkrGetNFTsByOwnerParams.

        Current page token for pagination.  # noqa: E501

        :param page_token: The page_token of this AnkrGetNFTsByOwnerParams.  # noqa: E501
        :type: str
        """

        self._page_token = page_token

    @property
    def sync_check(self):
        """Gets the sync_check of this AnkrGetNFTsByOwnerParams.  # noqa: E501

        If false, the data is returned regardless of indexer health, if true, the data is returned only when the indexer health check is positive.  # noqa: E501

        :return: The sync_check of this AnkrGetNFTsByOwnerParams.  # noqa: E501
        :rtype: bool
        """
        return self._sync_check

    @sync_check.setter
    def sync_check(self, sync_check):
        """Sets the sync_check of this AnkrGetNFTsByOwnerParams.

        If false, the data is returned regardless of indexer health, if true, the data is returned only when the indexer health check is positive.  # noqa: E501

        :param sync_check: The sync_check of this AnkrGetNFTsByOwnerParams.  # noqa: E501
        :type: bool
        """

        self._sync_check = sync_check

    @property
    def wallet_address(self):
        """Gets the wallet_address of this AnkrGetNFTsByOwnerParams.  # noqa: E501

        Address to query for NFTs. Supports ENS.  # noqa: E501

        :return: The wallet_address of this AnkrGetNFTsByOwnerParams.  # noqa: E501
        :rtype: str
        """
        return self._wallet_address

    @wallet_address.setter
    def wallet_address(self, wallet_address):
        """Sets the wallet_address of this AnkrGetNFTsByOwnerParams.

        Address to query for NFTs. Supports ENS.  # noqa: E501

        :param wallet_address: The wallet_address of this AnkrGetNFTsByOwnerParams.  # noqa: E501
        :type: str
        """
        if wallet_address is None:
            raise ValueError("Invalid value for `wallet_address`, must not be `None`")  # noqa: E501

        self._wallet_address = wallet_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnkrGetNFTsByOwnerParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnkrGetNFTsByOwnerParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
