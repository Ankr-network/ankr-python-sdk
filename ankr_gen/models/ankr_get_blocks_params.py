# coding: utf-8

"""
    Ankr Advanced API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnkrGetBlocksParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blockchain': 'str',
        'decode_logs': 'bool',
        'decode_tx_data': 'bool',
        'desc_order': 'bool',
        'from_block': 'int',
        'include_logs': 'bool',
        'include_txs': 'bool',
        'sync_check': 'bool',
        'to_block': 'object'
    }

    attribute_map = {
        'blockchain': 'blockchain',
        'decode_logs': 'decodeLogs',
        'decode_tx_data': 'decodeTxData',
        'desc_order': 'descOrder',
        'from_block': 'fromBlock',
        'include_logs': 'includeLogs',
        'include_txs': 'includeTxs',
        'sync_check': 'syncCheck',
        'to_block': 'toBlock'
    }

    def __init__(self, blockchain=None, decode_logs=None, decode_tx_data=None, desc_order=None, from_block=None, include_logs=None, include_txs=None, sync_check=None, to_block=None):  # noqa: E501
        """AnkrGetBlocksParams - a model defined in Swagger"""  # noqa: E501
        self._blockchain = None
        self._decode_logs = None
        self._decode_tx_data = None
        self._desc_order = None
        self._from_block = None
        self._include_logs = None
        self._include_txs = None
        self._sync_check = None
        self._to_block = None
        self.discriminator = None
        self.blockchain = blockchain
        if decode_logs is not None:
            self.decode_logs = decode_logs
        if decode_tx_data is not None:
            self.decode_tx_data = decode_tx_data
        if desc_order is not None:
            self.desc_order = desc_order
        if from_block is not None:
            self.from_block = from_block
        if include_logs is not None:
            self.include_logs = include_logs
        if include_txs is not None:
            self.include_txs = include_txs
        if sync_check is not None:
            self.sync_check = sync_check
        if to_block is not None:
            self.to_block = to_block

    @property
    def blockchain(self):
        """Gets the blockchain of this AnkrGetBlocksParams.  # noqa: E501

        Name of the blockchain. Acceptable values: arbitrum, avalanche, base, bsc, eth, fantom, flare, gnosis, optimism, polygon, polygon_zkevm, rollux, syscoin, zksync_era, avalanche_fuji, eth_goerli, optimism_testnet, polygon_mumbai.  # noqa: E501

        :return: The blockchain of this AnkrGetBlocksParams.  # noqa: E501
        :rtype: str
        """
        return self._blockchain

    @blockchain.setter
    def blockchain(self, blockchain):
        """Sets the blockchain of this AnkrGetBlocksParams.

        Name of the blockchain. Acceptable values: arbitrum, avalanche, base, bsc, eth, fantom, flare, gnosis, optimism, polygon, polygon_zkevm, rollux, syscoin, zksync_era, avalanche_fuji, eth_goerli, optimism_testnet, polygon_mumbai.  # noqa: E501

        :param blockchain: The blockchain of this AnkrGetBlocksParams.  # noqa: E501
        :type: str
        """
        if blockchain is None:
            raise ValueError("Invalid value for `blockchain`, must not be `None`")  # noqa: E501
        allowed_values = ["arbitrum", "avalanche", "avalanche_fuji", "base", "bsc", "eth", "eth_goerli", "fantom", "flare", "gnosis", "linea", "optimism", "optimism_testnet", "polygon", "polygon_mumbai", "polygon_zkevm", "rollux", "scroll", "syscoin"]  # noqa: E501
        if blockchain not in allowed_values:
            raise ValueError(
                "Invalid value for `blockchain` ({0}), must be one of {1}"  # noqa: E501
                .format(blockchain, allowed_values)
            )

        self._blockchain = blockchain

    @property
    def decode_logs(self):
        """Gets the decode_logs of this AnkrGetBlocksParams.  # noqa: E501

        Decode logs (true) or not (false).  # noqa: E501

        :return: The decode_logs of this AnkrGetBlocksParams.  # noqa: E501
        :rtype: bool
        """
        return self._decode_logs

    @decode_logs.setter
    def decode_logs(self, decode_logs):
        """Sets the decode_logs of this AnkrGetBlocksParams.

        Decode logs (true) or not (false).  # noqa: E501

        :param decode_logs: The decode_logs of this AnkrGetBlocksParams.  # noqa: E501
        :type: bool
        """

        self._decode_logs = decode_logs

    @property
    def decode_tx_data(self):
        """Gets the decode_tx_data of this AnkrGetBlocksParams.  # noqa: E501

        Decode transaction data (true) or not (false).  # noqa: E501

        :return: The decode_tx_data of this AnkrGetBlocksParams.  # noqa: E501
        :rtype: bool
        """
        return self._decode_tx_data

    @decode_tx_data.setter
    def decode_tx_data(self, decode_tx_data):
        """Sets the decode_tx_data of this AnkrGetBlocksParams.

        Decode transaction data (true) or not (false).  # noqa: E501

        :param decode_tx_data: The decode_tx_data of this AnkrGetBlocksParams.  # noqa: E501
        :type: bool
        """

        self._decode_tx_data = decode_tx_data

    @property
    def desc_order(self):
        """Gets the desc_order of this AnkrGetBlocksParams.  # noqa: E501

        Sorting order. Descending (true) or ascending (false).  # noqa: E501

        :return: The desc_order of this AnkrGetBlocksParams.  # noqa: E501
        :rtype: bool
        """
        return self._desc_order

    @desc_order.setter
    def desc_order(self, desc_order):
        """Sets the desc_order of this AnkrGetBlocksParams.

        Sorting order. Descending (true) or ascending (false).  # noqa: E501

        :param desc_order: The desc_order of this AnkrGetBlocksParams.  # noqa: E501
        :type: bool
        """

        self._desc_order = desc_order

    @property
    def from_block(self):
        """Gets the from_block of this AnkrGetBlocksParams.  # noqa: E501

        Number of the first block in a range. Integer or string (hex value or earliest). Max range — 30 blocks.  # noqa: E501

        :return: The from_block of this AnkrGetBlocksParams.  # noqa: E501
        :rtype: int
        """
        return self._from_block

    @from_block.setter
    def from_block(self, from_block):
        """Sets the from_block of this AnkrGetBlocksParams.

        Number of the first block in a range. Integer or string (hex value or earliest). Max range — 30 blocks.  # noqa: E501

        :param from_block: The from_block of this AnkrGetBlocksParams.  # noqa: E501
        :type: int
        """

        self._from_block = from_block

    @property
    def include_logs(self):
        """Gets the include_logs of this AnkrGetBlocksParams.  # noqa: E501

        Include logs (true) or exclude them (false). Logs are stored inside transactions, so includeTxs also has to be true when IncludeLogs is true.  # noqa: E501

        :return: The include_logs of this AnkrGetBlocksParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_logs

    @include_logs.setter
    def include_logs(self, include_logs):
        """Sets the include_logs of this AnkrGetBlocksParams.

        Include logs (true) or exclude them (false). Logs are stored inside transactions, so includeTxs also has to be true when IncludeLogs is true.  # noqa: E501

        :param include_logs: The include_logs of this AnkrGetBlocksParams.  # noqa: E501
        :type: bool
        """

        self._include_logs = include_logs

    @property
    def include_txs(self):
        """Gets the include_txs of this AnkrGetBlocksParams.  # noqa: E501

        Include transactions (true) or exclude them (false). IncludeTxs has to be true if IncludeLogs is true.  # noqa: E501

        :return: The include_txs of this AnkrGetBlocksParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_txs

    @include_txs.setter
    def include_txs(self, include_txs):
        """Sets the include_txs of this AnkrGetBlocksParams.

        Include transactions (true) or exclude them (false). IncludeTxs has to be true if IncludeLogs is true.  # noqa: E501

        :param include_txs: The include_txs of this AnkrGetBlocksParams.  # noqa: E501
        :type: bool
        """

        self._include_txs = include_txs

    @property
    def sync_check(self):
        """Gets the sync_check of this AnkrGetBlocksParams.  # noqa: E501

        If false, the data is returned regardless of indexer health, if true, the data is returned only when the indexer health check is positive.  # noqa: E501

        :return: The sync_check of this AnkrGetBlocksParams.  # noqa: E501
        :rtype: bool
        """
        return self._sync_check

    @sync_check.setter
    def sync_check(self, sync_check):
        """Sets the sync_check of this AnkrGetBlocksParams.

        If false, the data is returned regardless of indexer health, if true, the data is returned only when the indexer health check is positive.  # noqa: E501

        :param sync_check: The sync_check of this AnkrGetBlocksParams.  # noqa: E501
        :type: bool
        """

        self._sync_check = sync_check

    @property
    def to_block(self):
        """Gets the to_block of this AnkrGetBlocksParams.  # noqa: E501

        Number of the last block in a range. Integer or string (hex value or latest). Max range — 30 blocks.  # noqa: E501

        :return: The to_block of this AnkrGetBlocksParams.  # noqa: E501
        :rtype: object
        """
        return self._to_block

    @to_block.setter
    def to_block(self, to_block):
        """Sets the to_block of this AnkrGetBlocksParams.

        Number of the last block in a range. Integer or string (hex value or latest). Max range — 30 blocks.  # noqa: E501

        :param to_block: The to_block of this AnkrGetBlocksParams.  # noqa: E501
        :type: object
        """

        self._to_block = to_block

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnkrGetBlocksParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnkrGetBlocksParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
