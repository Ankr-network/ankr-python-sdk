# coding: utf-8

"""
    Ankr Advanced API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnkrGetTransactionsByHashParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blockchain': 'list[str]',
        'decode_logs': 'bool',
        'decode_tx_data': 'bool',
        'include_logs': 'bool',
        'sync_check': 'bool',
        'transaction_hash': 'str'
    }

    attribute_map = {
        'blockchain': 'blockchain',
        'decode_logs': 'decodeLogs',
        'decode_tx_data': 'decodeTxData',
        'include_logs': 'includeLogs',
        'sync_check': 'syncCheck',
        'transaction_hash': 'transactionHash'
    }

    def __init__(self, blockchain=None, decode_logs=None, decode_tx_data=None, include_logs=None, sync_check=None, transaction_hash=None):  # noqa: E501
        """AnkrGetTransactionsByHashParams - a model defined in Swagger"""  # noqa: E501
        self._blockchain = None
        self._decode_logs = None
        self._decode_tx_data = None
        self._include_logs = None
        self._sync_check = None
        self._transaction_hash = None
        self.discriminator = None
        if blockchain is not None:
            self.blockchain = blockchain
        if decode_logs is not None:
            self.decode_logs = decode_logs
        if decode_tx_data is not None:
            self.decode_tx_data = decode_tx_data
        if include_logs is not None:
            self.include_logs = include_logs
        if sync_check is not None:
            self.sync_check = sync_check
        self.transaction_hash = transaction_hash

    @property
    def blockchain(self):
        """Gets the blockchain of this AnkrGetTransactionsByHashParams.  # noqa: E501

        Name of the blockchain or list of blockchain names. Single: eth. Multiple: [arbitrum, avalanche, base, bsc, eth, fantom, flare, gnosis, optimism, polygon, polygon_zkevm, rollux, syscoin, zksync_era, avalanche_fuji, eth_goerli, optimism_testnet, polygon_mumbai]. All chains: empty value.  # noqa: E501

        :return: The blockchain of this AnkrGetTransactionsByHashParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._blockchain

    @blockchain.setter
    def blockchain(self, blockchain):
        """Sets the blockchain of this AnkrGetTransactionsByHashParams.

        Name of the blockchain or list of blockchain names. Single: eth. Multiple: [arbitrum, avalanche, base, bsc, eth, fantom, flare, gnosis, optimism, polygon, polygon_zkevm, rollux, syscoin, zksync_era, avalanche_fuji, eth_goerli, optimism_testnet, polygon_mumbai]. All chains: empty value.  # noqa: E501

        :param blockchain: The blockchain of this AnkrGetTransactionsByHashParams.  # noqa: E501
        :type: list[str]
        """

        self._blockchain = blockchain

    @property
    def decode_logs(self):
        """Gets the decode_logs of this AnkrGetTransactionsByHashParams.  # noqa: E501

        Decode logs (true) or not (false).  # noqa: E501

        :return: The decode_logs of this AnkrGetTransactionsByHashParams.  # noqa: E501
        :rtype: bool
        """
        return self._decode_logs

    @decode_logs.setter
    def decode_logs(self, decode_logs):
        """Sets the decode_logs of this AnkrGetTransactionsByHashParams.

        Decode logs (true) or not (false).  # noqa: E501

        :param decode_logs: The decode_logs of this AnkrGetTransactionsByHashParams.  # noqa: E501
        :type: bool
        """

        self._decode_logs = decode_logs

    @property
    def decode_tx_data(self):
        """Gets the decode_tx_data of this AnkrGetTransactionsByHashParams.  # noqa: E501

        Decode transaction data (true) or not (false).  # noqa: E501

        :return: The decode_tx_data of this AnkrGetTransactionsByHashParams.  # noqa: E501
        :rtype: bool
        """
        return self._decode_tx_data

    @decode_tx_data.setter
    def decode_tx_data(self, decode_tx_data):
        """Sets the decode_tx_data of this AnkrGetTransactionsByHashParams.

        Decode transaction data (true) or not (false).  # noqa: E501

        :param decode_tx_data: The decode_tx_data of this AnkrGetTransactionsByHashParams.  # noqa: E501
        :type: bool
        """

        self._decode_tx_data = decode_tx_data

    @property
    def include_logs(self):
        """Gets the include_logs of this AnkrGetTransactionsByHashParams.  # noqa: E501

        Include logs (true) or exclude them (false).  # noqa: E501

        :return: The include_logs of this AnkrGetTransactionsByHashParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_logs

    @include_logs.setter
    def include_logs(self, include_logs):
        """Sets the include_logs of this AnkrGetTransactionsByHashParams.

        Include logs (true) or exclude them (false).  # noqa: E501

        :param include_logs: The include_logs of this AnkrGetTransactionsByHashParams.  # noqa: E501
        :type: bool
        """

        self._include_logs = include_logs

    @property
    def sync_check(self):
        """Gets the sync_check of this AnkrGetTransactionsByHashParams.  # noqa: E501

        If false, the data is returned regardless of indexer health, if true, the data is returned only when the indexer health check is positive.  # noqa: E501

        :return: The sync_check of this AnkrGetTransactionsByHashParams.  # noqa: E501
        :rtype: bool
        """
        return self._sync_check

    @sync_check.setter
    def sync_check(self, sync_check):
        """Sets the sync_check of this AnkrGetTransactionsByHashParams.

        If false, the data is returned regardless of indexer health, if true, the data is returned only when the indexer health check is positive.  # noqa: E501

        :param sync_check: The sync_check of this AnkrGetTransactionsByHashParams.  # noqa: E501
        :type: bool
        """

        self._sync_check = sync_check

    @property
    def transaction_hash(self):
        """Gets the transaction_hash of this AnkrGetTransactionsByHashParams.  # noqa: E501

        Hash of the transaction.  # noqa: E501

        :return: The transaction_hash of this AnkrGetTransactionsByHashParams.  # noqa: E501
        :rtype: str
        """
        return self._transaction_hash

    @transaction_hash.setter
    def transaction_hash(self, transaction_hash):
        """Sets the transaction_hash of this AnkrGetTransactionsByHashParams.

        Hash of the transaction.  # noqa: E501

        :param transaction_hash: The transaction_hash of this AnkrGetTransactionsByHashParams.  # noqa: E501
        :type: str
        """
        if transaction_hash is None:
            raise ValueError("Invalid value for `transaction_hash`, must not be `None`")  # noqa: E501

        self._transaction_hash = transaction_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnkrGetTransactionsByHashParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnkrGetTransactionsByHashParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
